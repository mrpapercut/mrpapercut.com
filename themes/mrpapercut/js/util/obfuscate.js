'use strict';

const baseCodeStart = '_=~[];_={_:{_:!![]+[],$_:![]+[],$:[]+{},__:[][_]+[]},_$:++_,$_:++_,$$:-~_++,$:-~_,__:-~++_},_._.$$_=_._.$[_.__+_.$_]+_._.$[_.$_]+_._.__[_.$_]+_._.$_[_.$]+_._._[_._$]+_._._[_.$_]+_._.__[_._$]+_._.$[_.__+_.$_]+_._._[_._$]+_._.$[_.$_]+_._._[_.$_],_.$$_=[][_._.$$_][_._.$$_],_._.___=[]+/[]/[_._.$$_],_._.$$=[]+([]+[])[_._.$$_],_._.__$=_._._[_._$]+_._.$[_.$_]+_._.$$[_.$_+_.__+_.__]+_._._[_._$]+_._._[_.$_]+_._.__[_.$_+_.__]+_._.__[_.$_]+_._.$$[[]+_.$_+_.__];_._.$__=_._._[_._.$_[_.$$]+_._.__[_.$_+_.__]+_._.__[_.$_]+((_.$$+_.$)*_.__)[_._.__$](_.$*(_.$+_.__))](),_._.$$$=_._._[_.$_]+_._._[_.$]+_._._[_._$]+_._._[_.$$]+_._._[_.$_]+_._.__[_.$_];_._._$$=[]+_.$$_(_._.$$$+_._.$[_.$+_.__]+([]+~_._$)[_._$]+_.$_+_._.$__[[]+_.$$+(_.$$+_.$)]+_.$$)(),_.$$$=_.$$_(_._.$$$+_._.$[_.$+_.__]+_._._[_.$]+_._.$_[_.$]+_._.$[_.__+_.$_]+_._.$_[_.$_]+_._.___[[]+_.$_+_.__]+_._._[_.$])(),_.$__=_.$$_(_._.$$$+_._.$[_.$+_.__]+_._._[_.$$]+_._.__[_.$_]+_._._[_.$]+_._.$_[_.$]+_._.$[_.__+_.$_]+_._.$_[_.$_]+_._.___[[]+_.$_+_.__]+_._._[_.$])();_._._$=[]+_.$$$(_._.$[_.$+_.__])[_._$];';

const functionStart = '_.$$_(';
const functionEnd = ')()';

const lookupTable = {
	' ': '_._.$[_.$+_.__]',
	'(': '_._.$$[_.$*(_.$$+_.$)]',
	')': '_._.$$[_.__*_.__]',
	'{': '_._.$$[_.$*(_.$+_.$)]',
	'}': '_._.$$[[]+_.$+_.__]',
	'[': '_._.$$[[]+_.$$+_._$]',
	']': '_._.$$[[]+_.$+_.$$]',
	'<': '_._.$__[_._$]',
	'>': '_._.$__[[]+_.$_+(_.$*_.$)]',
	'=': '_._.$__[_.$+_.__]',
	'"': '_._.$__[_.__+_.__]',
	'/': '_._.$__[[]+_.$$+(_.$$+_.$)]',
	'-': '_._._$$[_._$]',
	'.': '_._._$$[_.$$]',
	'0': '_._$',
	'1': '_.$_',
	'2': '_.$$',
	'3': '_.$',
	'4': '_.__',
	'5': '_.$_+_.__',
	'6': '_.$+_.$',
	'7': '_.$+_.__',
	'8': '_.__+_.__',
	'9': '_.$*_.$',
	'E': '_._.___[_.$*_.__]',
	'O': '_._.$[_.$$*_.__]',
	'R': '_._.___[_.$*_.$]',
	'S': '_._.$$[_.$*_.$]',
	'a': '_._.$_[_.$_]',
	'b': '_._.$[_.$$]',
	'c': '_._.$[_.__+_.$_]',
	'd': '_._.__[_.$$]',
	'e': '_._._[_.$]',
	'f': '_._.$_[_._$]',
	'g': '_._.$$[[]+_.$_+_.__]',
	'h': '_.$__(_._._$+(_.$+_.$)+(_.__+_.__))',
	'i': '_._.__[_.$_+_.__]',
	'j': '_._.$[_.$]',
	'k': '_.$__(_._._$+(_.$+_.$)+_._.$[_.$$])',
	'l': '_._.$_[_.$$]',
	'm': '_.$__(_._._$+(_.$+_.$)+_._.__[_.$$])',
	'n': '_._.__[_.$_]',
	'o': '_._.$[_.$_]',
	'p': '_._.___[[]+_.$_+_.__]',
	'q': '_.$__(_._._$+(_.$+_.__)+_.$_)',
	'r': '_._._[_.$_]',
	's': '_._.$_[_.$]',
	't': '_._._[_._$]',
	'u': '_._._[_.$$]',
	'v': '_._.___[[]+_.$$+(_.$$+_.$)]',
	'w': '_.$__(_._._$+(_.$+_.__)+(_.__+_.$))',
	'x': '_._.___[_.$*_.__+_.$_]',
	'y': '_.$__(_._._$+(_.$+_.__)+(_.$*_.$))',
	'z': '_.$__(_._._$+(_.$+_.__)+_._.$_[_.$_])'
}

const sortOccurences = code => {
	const frequency = {},
		array = code.split('');

	for (let i = 0; i < array.length; i++) {
		const value = array[i];
		if (value in frequency) {
			frequency[value]++;
		} else {
			frequency[value] = 1;
		}
	}

	const uniques = [];
	for (const value in frequency) uniques.push(value);

	return uniques.sort((a, b) => frequency[b] - frequency[a]);
}

const generateLookupTable = code => {
	const occ = sortOccurences(code),
		codesplit = code.replace(/\s/g, ' ').split(''),
		base = '$',
		vars = ['_','$','__','$_','$$','_$','___','$__','$$_','$$$','_$$','__$','$_$','_$_','____','$___','$$__','$$$_','$$$$','_$$$','__$$','___$','_$__','_$$_','__$_','$$_$','$_$$','$_$_','_$_$','$__$','_____','$____','$_$_$','_$_$_','__$__','_$___','__$$_','_$_$$','$__$$','$$_$_','$$__$','$$_$$','$___$','$__$_'];

	const table = {};
	occ.forEach((c, i) => {
		table[c] = {key: vars[i], value: lookupTable[c]};
	});

	const localTable = {}, substCode = [];
	codesplit.forEach(c => {
		const t = table[c];
		substCode.push(base + '.' + t.key);
		localTable[t.key] = t.value;
	});

	const localLookupTable = base + '=' + JSON.stringify(localTable).replace(/"/g, '') + ';';

	return {
		table: localLookupTable,
		obfCode: substCode.join('+')
	}
}

// const encode = code => code.replace(/\s/g, ' ').split('').map(c => lookupTable[c]).join('+');

// const obfuscate = code => [baseCodeStart, functionStart, encode(code), functionEnd].join('');

const obfuscateLT = code => {
	const {table, obfCode} = generateLookupTable(code);
	return [baseCodeStart, table, functionStart, obfCode, functionEnd].join('');
}

export default obfuscateLT;
